import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.cluster import KMeans
print("\n--- Smart Urban Planning AI System ---\n")
# 1. Traffic Congestion Prediction
print("🚦 Traffic Congestion Prediction\n")
traffic_data = {
    'hour': [7, 8, 9, 17, 18, 19, 12, 15, 10],
    'day_of_week': [1, 1, 1, 5, 5, 5, 3, 3, 2],
    'weather_condition': [0, 1, 0, 1, 0, 1, 0, 0, 1],
    'congestion_level': [1, 1, 1, 1, 1, 1, 0, 0, 0]
}
df_traffic = pd.DataFrame(traffic_data)
X = df_traffic[['hour', 'day_of_week', 'weather_condition']]
y = df_traffic['congestion_level']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = RandomForestClassifier()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
# 2. Affordable Housing Location Clusterin
print("\n🏘️ Affordable Housing Recommendation\n")
}
df_housing = pd.DataFrame(housing_data)
features = df_housing[['avg_income', 'avg_rent', 'job_accessibility_score', 'transport_score']]
kmeans = KMeans(n_clusters=2, random_state=0)
df_housing['cluster'] = kmeans.fit_predict(features)

affordable_cluster = df_housing.groupby('cluster')['avg_rent'].mean().idxmin()
recommended_zones = df_housing[df_housing['cluster'] == affordable_cluster]['zone'].tolist()
print("Recommended Affordable Housing Zones:", recommended_zones)
# Visualize clusters
plt.figure(figsize=(6, 4))
plt.scatter(df_housing['avg_income'], df_housing['avg_rent'], c=df_housing['cluster'], cmap='viridis')
plt.xlabel('Average Income')
plt.ylabel('Average Rent')
plt.title('Affordable Housing Cluster Analysis')
plt.grid(True)
plt.show()
# 3. Public Space Accessibility Analysis
print("\n🌳 Public Space Accessibility Analysis\n")
public_space_data = {
    'Zone': ['Mangrove Forest', 'Himalayas', 'Chennai', 'Bangalore', 'Delhi', 'Kashmir'],
    'Parks': [89, 70, 99, 110, 290, 95],
    'Community_Centers': [59, 68, 85, 158, 198, 156]
}
df_public = pd.DataFrame(public_space_data)
df_public['Total_Public_Spaces'] = df_public['Parks'] + df_public['Community_Centers']
df_filtered = df_public[df_public['Total_Public_Spaces'] >= 100]
# Display results
print("Zones with 100 or more public spaces:\n")
print(df_filtered[['Zone', 'Total_Public_Spaces']])
# 4. Climate Vulnerability Analysis
print("\n🔥 Climate Vulnerability Analysis\n")
climate_data = {
    'Zone': ['Mangrove Forest', 'Himalayas', 'Chennai', 'Bangalore', 'Delhi', 'Kashmir'],
    'Flood_Risk': [0.89, 0.70, 0.99, 0.110, 0.290, 0.95],
    'Heat_Risk': [0.59, 0.68, 0.85, 0.158, 0.198, 0.156]
}
df_climate = pd.DataFrame(climate_data)
df_climate['Vulnerability_Index'] = df_climate[['Flood_Risk', 'Heat_Risk']].mean(axis=1)
print(df_climate[['Zone', 'Vulnerability_Index']])
plt.figure(figsize=(8, 4))
plt.bar(df_climate['Zone'], df_climate['Vulnerability_Index'], color='red')
plt.xlabel('Zone')
plt.ylabel('Climate Vulnerability Index (0-1)')
plt.title('Climate Vulnerability by Zone')
plt.grid(axis='y')
plt.show()
